import { User } from './interfaces_core.js';
import { BidCard } from './interfaces_bidding.js';

// Define these types here since they might not be exported from the bidding interfaces
interface JobCategory {
    id: string;
    name: string;
    description?: string;
}

interface JobType {
    id: string;
    name: string;
    description?: string;
    jobCategoryId?: string;
}

/**
 * Represents a group of bid cards that are being grouped together
 * for collective bidding to achieve better rates.
 */
export interface BidGroup {
    id: string;
    name: string;
    description?: string;
    status: 'forming' | 'active' | 'bidding' | 'pending_acceptance' | 'completed' | 'canceled' | 'expired';
    jobCategoryId?: string;
    jobCategory?: JobCategory;
    jobTypeId?: string;
    jobType?: JobType;
    zipCode: string;
    locationRadius?: number; // In miles or kilometers
    city?: string;
    state?: string;
    country: string;
    minMembers?: number;
    maxMembers?: number;
    currentMembers: number;
    targetSavingsPercentage?: number; // Target group discount
    actualSavingsPercentage?: number; // Actual achieved discount
    createdById: string;
    createdBy?: User;
    adminUserId?: string;
    adminUser?: User;
    formationDeadline?: string; // ISO-8601
    bidDeadline?: string; // ISO-8601
    acceptanceDeadline?: string; // ISO-8601
    estimatedStartDate?: string; // ISO-8601
    estimatedEndDate?: string; // ISO-8601
    isAutoGenerated: boolean;
    hasAcceptedBid: boolean;
    acceptedGroupBidId?: string;
    acceptedGroupBid?: GroupBid;
    metadata?: Record<string, any>;
    createdAt: string; // ISO-8601
    updatedAt: string; // ISO-8601
    members?: BidGroupMember[];
    joiningCriteria?: GroupJoiningCriterion[];
    groupBids?: GroupBid[];
    discussions?: GroupDiscussion[];
}

/**
 * Represents a criterion for joining a bid group.
 */
export interface GroupJoiningCriterion {
    id: string;
    bidGroupId: string;
    bidGroup?: BidGroup;
    criterionType: 'budget_range' | 'project_size' | 'timeframe' | 'materials' | 'custom';
    criterionName: string;
    minValue?: number;
    maxValue?: number;
    textValue?: string;
    booleanValue?: boolean;
    dateValue?: string; // ISO-8601
    isRequired: boolean;
    criteriaOrder?: number;
    createdAt: string; // ISO-8601
    updatedAt: string; // ISO-8601
}

/**
 * Represents a member (bid card) in a bid group.
 */
export interface BidGroupMember {
    id: string;
    bidGroupId: string;
    bidGroup?: BidGroup;
    bidCardId: string;
    bidCard?: BidCard;
    userId: string;
    user?: User;
    joinedAt: string; // ISO-8601
    status: 'invited' | 'pending' | 'joined' | 'left' | 'removed' | 'rejected';
    leftAt?: string; // ISO-8601
    removalReason?: string;
    isAdmin: boolean;
    isFoundingMember: boolean;
    visibleToGroup: boolean;
    hasAcceptedGroupBid: boolean;
    acceptedAt?: string; // ISO-8601
    individualSavingsAmount?: number;
    metadata?: Record<string, any>;
    createdAt: string; // ISO-8601
    updatedAt: string; // ISO-8601
}

/**
 * Represents a bid submitted by a contractor for a group of projects.
 */
export interface GroupBid {
    id: string;
    bidGroupId: string;
    bidGroup?: BidGroup;
    contractorId: string;
    contractor?: User;
    status: 'draft' | 'submitted' | 'under_review' | 'shortlisted' | 'accepted' | 'threshold_met' | 'rejected' | 'expired' | 'withdrawn' | 'countered';
    groupPrice: number; // Total price for all projects
    individualPrice: number; // Average price per project
    savingsPercentage?: number; // Discount compared to individual bidding
    currency: string;
    scopeOfWork: string;
    materialsIncluded: boolean;
    materialsDescription?: string;
    timelineDays?: number; // Estimated days to complete all projects
    startDate?: string; // ISO-8601
    requiredAcceptanceCount?: number; // Minimum number of acceptances required
    requiredAcceptancePercentage?: number; // Or minimum percentage
    currentAcceptanceCount: number;
    acceptanceDeadline: string; // ISO-8601 - When bid expires
    notes?: string;
    termsAndConditions?: string;
    isFinalOffer: boolean;
    metadata?: Record<string, any>;
    createdAt: string; // ISO-8601
    updatedAt: string; // ISO-8601
    bidItems?: GroupBidItem[];
    projectSpecifics?: GroupBidProjectSpecific[];
    acceptances?: GroupBidAcceptance[];
}

/**
 * Represents an item in a group bid (labor, materials, etc.).
 */
export interface GroupBidItem {
    id: string;
    groupBidId: string;
    groupBid?: GroupBid;
    itemName: string;
    itemType: 'labor' | 'materials' | 'equipment' | 'permits' | 'subcontractor' | 'other';
    description?: string;
    quantity?: number;
    unitPrice?: number;
    totalPrice: number;
    appliesToAllProjects: boolean;
    createdAt: string; // ISO-8601
    updatedAt: string; // ISO-8601
}

/**
 * Represents specific details for a single project within a group bid.
 */
export interface GroupBidProjectSpecific {
    id: string;
    groupBidId: string;
    groupBid?: GroupBid;
    bidCardId: string;
    bidCard?: BidCard;
    specificPrice: number; // Price for this specific project
    specificScope?: string; // Additional scope details for this project
    specificMaterials?: string; // Material specifics for this project
    timelineDays?: number; // Specific timeline for this project
    startDate?: string; // ISO-8601
    notes?: string;
    createdAt: string; // ISO-8601
    updatedAt: string; // ISO-8601
}

/**
 * Represents a homeowner's acceptance of a group bid for their specific project.
 */
export interface GroupBidAcceptance {
    id: string;
    groupBidId: string;
    groupBid?: GroupBid;
    bidCardId: string;
    bidCard?: BidCard;
    userId: string;
    user?: User;
    acceptedAt: string; // ISO-8601
    acceptanceAmount: number; // The amount this user accepted
    status: 'accepted' | 'canceled' | 'refunded' | 'payment_pending' | 'payment_completed';
    paymentTransactionId?: string;
    notes?: string;
    createdAt: string; // ISO-8601
    updatedAt: string; // ISO-8601
}

/**
 * Represents a discussion thread within a bid group.
 */
export interface GroupDiscussion {
    id: string;
    bidGroupId: string;
    bidGroup?: BidGroup;
    title: string;
    createdById: string;
    createdBy?: User;
    isAnnouncement: boolean;
    isPinned: boolean;
    isClosed: boolean;
    closedAt?: string; // ISO-8601
    createdAt: string; // ISO-8601
    updatedAt: string; // ISO-8601
    messages?: GroupDiscussionMessage[];
}

/**
 * Represents a message in a group discussion.
 */
export interface GroupDiscussionMessage {
    id: string;
    discussionId: string;
    discussion?: GroupDiscussion;
    senderId: string;
    sender?: User;
    content: string;
    isEdited: boolean;
    editedAt?: string; // ISO-8601
    parentMessageId?: string;
    parentMessage?: GroupDiscussionMessage;
    mediaUrls?: string[];
    createdAt: string; // ISO-8601
    updatedAt: string; // ISO-8601
}

/**
 * Represents an invitation to join a bid group.
 */
export interface GroupInvitation {
    id: string;
    bidGroupId: string;
    bidGroup?: BidGroup;
    bidCardId?: string;
    bidCard?: BidCard;
    inviterId: string;
    inviter?: User;
    inviteeId?: string;
    invitee?: User;
    inviteeEmail?: string;
    token: string;
    status: 'pending' | 'accepted' | 'declined' | 'expired' | 'canceled';
    message?: string;
    sentAt: string; // ISO-8601
    expiresAt: string; // ISO-8601
    respondedAt?: string; // ISO-8601
    createdAt: string; // ISO-8601
    updatedAt: string; // ISO-8601
}

/**
 * Represents a template for creating new bid groups.
 */
export interface GroupFormationTemplate {
    id: string;
    name: string;
    description?: string;
    jobCategoryId?: string;
    jobCategory?: JobCategory;
    jobTypeId?: string;
    jobType?: JobType;
    minMembers: number;
    maxMembers: number;
    targetSavingsPercentage: number;
    formationDays: number; // Days to allow for formation
    biddingDays: number; // Days to allow for contractor bidding
    acceptanceDays: number; // Days to allow for homeowner acceptance
    defaultCriteria?: Record<string, any>; // Default joining criteria
    isActive: boolean;
    createdById: string;
    createdBy?: User;
    createdAt: string; // ISO-8601
    updatedAt: string; // ISO-8601
}

/**
 * Represents a recommendation for a homeowner to join a specific group.
 */
export interface GroupRecommendation {
    id: string;
    bidCardId: string;
    bidCard?: BidCard;
    userId: string;
    user?: User;
    recommendedGroupId: string;
    recommendedGroup?: BidGroup;
    score: number; // Match score
    reason?: string;
    status: 'pending' | 'shown' | 'clicked' | 'joined' | 'dismissed';
    shownAt?: string; // ISO-8601
    clickedAt?: string; // ISO-8601
    joinedAt?: string; // ISO-8601
    dismissedAt?: string; // ISO-8601
    createdAt: string; // ISO-8601
    updatedAt: string; // ISO-8601
}

/**
 * Represents a similarity match between two bid cards.
 */
export interface GroupSimilarBid {
    id: string;
    sourceBidCardId: string;
    sourceBidCard?: BidCard;
    similarBidCardId: string;
    similarBidCard?: BidCard;
    similarityScore: number; // Higher means more similar
    dimensionScores?: Record<string, any>; // Detailed scores by similarity dimension
    isRecommended: boolean;
    createdAt: string; // ISO-8601
    updatedAt: string; // ISO-8601
}

/**
 * Represents an activity log entry for a bid group.
 */
export interface GroupActivityLog {
    id: string;
    bidGroupId: string;
    bidGroup?: BidGroup;
    activityType: 'member_joined' | 'member_left' | 'bid_received' | 'bid_accepted' | 'threshold_met' | 'group_activated' | 'group_completed' | 'group_canceled' | 'announcement' | 'settings_changed' | 'admin_changed';
    userId?: string;
    user?: User;
    bidCardId?: string;
    bidCard?: BidCard;
    groupBidId?: string;
    groupBid?: GroupBid;
    description: string;
    metadata?: Record<string, any>;
    createdAt: string; // ISO-8601
}

/**
 * Service interface for group bidding operations.
 */
export interface IGroupBiddingService {
    // Bid Group Operations
    createBidGroup(group: Partial<BidGroup>, userId: string): Promise<BidGroup>;
    getBidGroup(groupId: string): Promise<BidGroup>;
    updateBidGroup(groupId: string, updates: Partial<BidGroup>, userId: string): Promise<BidGroup>;
    listBidGroups(filters?: Record<string, any>): Promise<BidGroup[]>;
    addJoiningCriteria(groupId: string, criteria: Partial<GroupJoiningCriterion>[], userId: string): Promise<GroupJoiningCriterion[]>;
    
    // Group Membership Operations
    joinBidGroup(groupId: string, bidCardId: string, userId: string): Promise<BidGroupMember>;
    leaveBidGroup(groupId: string, bidCardId: string, userId: string): Promise<void>;
    removeMemberFromGroup(groupId: string, memberId: string, adminUserId: string, reason?: string): Promise<void>;
    listGroupMembers(groupId: string): Promise<BidGroupMember[]>;
    
    // Group Bid Operations
    createGroupBid(bidGroupId: string, bid: Partial<GroupBid>, userId: string): Promise<GroupBid>;
    getGroupBid(bidId: string): Promise<GroupBid>;
    updateGroupBid(bidId: string, updates: Partial<GroupBid>, userId: string): Promise<GroupBid>;
    listGroupBidsForGroup(groupId: string): Promise<GroupBid[]>;
    acceptGroupBid(bidId: string, bidCardId: string, userId: string): Promise<GroupBidAcceptance>;
    
    // Group Discussion Operations
    createGroupDiscussion(groupId: string, discussion: Partial<GroupDiscussion>, userId: string): Promise<GroupDiscussion>;
    addDiscussionMessage(discussionId: string, message: Partial<GroupDiscussionMessage>, userId: string): Promise<GroupDiscussionMessage>;
    listGroupDiscussions(groupId: string): Promise<GroupDiscussion[]>;
    
    // Invitation Operations
    inviteToGroup(groupId: string, invitation: Partial<GroupInvitation>, inviterId: string): Promise<GroupInvitation>;
    respondToInvitation(invitationId: string, accept: boolean, userId: string): Promise<void>;
    
    // Recommendation Operations
    getGroupRecommendations(bidCardId: string, userId: string): Promise<GroupRecommendation[]>;
    markRecommendationStatus(recommendationId: string, status: 'shown' | 'clicked' | 'joined' | 'dismissed', userId: string): Promise<void>;
    
    // Template Operations
    createGroupTemplate(template: Partial<GroupFormationTemplate>, userId: string): Promise<GroupFormationTemplate>;
    getActiveTemplates(): Promise<GroupFormationTemplate[]>;
    createGroupFromTemplate(templateId: string, customizations: Partial<BidGroup>, userId: string): Promise<BidGroup>;
    
    // Analytics and Metrics
    getGroupSimilarBids(bidCardId: string): Promise<GroupSimilarBid[]>;
    getGroupActivityLog(groupId: string): Promise<GroupActivityLog[]>;
    getGroupMetrics(groupId: string): Promise<{
        averageSavings: number;
        memberCount: number;
        bidsReceived: number;
        acceptanceRate: number;
    }>;
}
